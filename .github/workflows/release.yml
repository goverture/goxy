name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test ./...
    
    - name: Build binaries
      run: |
        # Extract version and build info
        VERSION=${GITHUB_REF#refs/tags/}
        BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
        GIT_COMMIT=$(git rev-parse --short HEAD)
        
        # Build flags
        LDFLAGS="-s -w -X 'main.Version=$VERSION' -X 'main.BuildTime=$BUILD_TIME' -X 'main.GitCommit=$GIT_COMMIT'"
        
        # Build for multiple platforms
        GOOS=linux GOARCH=amd64 go build -ldflags="$LDFLAGS" -o dist/goxy-linux-amd64 .
        GOOS=linux GOARCH=arm64 go build -ldflags="$LDFLAGS" -o dist/goxy-linux-arm64 .
        GOOS=darwin GOARCH=amd64 go build -ldflags="$LDFLAGS" -o dist/goxy-darwin-amd64 .
        GOOS=darwin GOARCH=arm64 go build -ldflags="$LDFLAGS" -o dist/goxy-darwin-arm64 .
        GOOS=windows GOARCH=amd64 go build -ldflags="$LDFLAGS" -o dist/goxy-windows-amd64.exe .
        
        # Create compressed archives
        cd dist
        tar -czf goxy-linux-amd64.tar.gz goxy-linux-amd64
        tar -czf goxy-linux-arm64.tar.gz goxy-linux-arm64
        tar -czf goxy-darwin-amd64.tar.gz goxy-darwin-amd64
        tar -czf goxy-darwin-arm64.tar.gz goxy-darwin-arm64
        zip goxy-windows-amd64.zip goxy-windows-amd64.exe
    
    - name: Generate changelog
      id: changelog
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Extract changelog for this version
        if [ -f CHANGELOG.md ]; then
          awk '/^## \['$VERSION'\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > release_notes.md
        else
          echo "Release $VERSION" > release_notes.md
        fi
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: release_notes.md
        files: |
          dist/goxy-linux-amd64.tar.gz
          dist/goxy-linux-arm64.tar.gz
          dist/goxy-darwin-amd64.tar.gz
          dist/goxy-darwin-arm64.tar.gz
          dist/goxy-windows-amd64.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}